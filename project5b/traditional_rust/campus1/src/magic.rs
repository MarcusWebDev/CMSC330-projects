/**
 * DO NOT EDIT THIS FILE. When testing your code, we will
 * replace this file with our own version!
 */

#[derive(Debug)]
pub struct World {}

impl World {
    pub fn sound(&mut self, utterance: String) {
        println!("{}", utterance);
    }
}

pub trait TurtlePower {
    fn activate(&mut self, world: &mut World);
}

impl core::fmt::Debug for dyn TurtlePower {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        write!(f, "TurtlePower")
    }
}

#[derive(Debug)]
pub struct Wand {
    charges: u32,
}

impl Wand {
    pub fn new(charges: u32) -> Wand {
        Wand { charges }
    }
}

impl TurtlePower for Wand {
    /**
     * If 'charges' is positive, should play sound "ZAP!" and decrement 'charges.'
     * Otherwise, should do nothing.
     */
    fn activate(&mut self, world: &mut World) {
        if self.charges > 0 {
            world.sound(String::from("ZAP!"));
            self.charges -= 1;
        }
    }
}

#[derive(Debug)]
pub struct Crystal {}

impl Crystal {
    pub fn new() -> Crystal {
        Crystal {}
    }
}

impl TurtlePower for Crystal {
    /**
     * Crystals last forever. Activate should play a creepy "WOOOOOO" sound.
     */
    fn activate(&mut self, world: &mut World) {
        world.sound(String::from("WOOOOOO"));
    }
}
